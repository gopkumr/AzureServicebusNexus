@using System.Text.Json
@using Microsoft.JSInterop
@using NexusExplorer.App.Services
@using NexusExplorer.App.ViewModels

@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject INexusExplorerEvents globalEventHandler

@inherits LayoutComponentBase


<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Dense="true" Style="@($"background:{Colors.Indigo.Default};")">
        <MudIcon Icon="@Icons.Material.Filled.CloudSync" Title="Cloud" Size="Size.Large" />
        <MudText Typo="Typo.h5" Class="ml-3">Nexus Explorer</MudText>
        <MudSpacer />
        <MudToggleIconButton @bind-Toggled="_connectedToBus"
                             Icon="@Icons.Material.Filled.LinkOff" Color="@Color.Error" title=@(_connectedToBus ? "On" : "Off")
                             ToggledIcon="@Icons.Material.Filled.Link" ToggledColor="@Color.Success"
                             @onclick="OpenDialogAsync" />

        <span>@(_connectedToBus ? $"Connected to {_servicebusName}" : "Not Connected")</span>
    </MudAppBar>
    @if (_isInProgress)
    {
        <MudProgressLinear Color="Color.Primary"  Indeterminate="true" Class="mt-12"/>
    }
    <MudMainContent>
        @Body
    </MudMainContent>
    <MudAppBar Bottom="true" Dense="true" Fixed="true" Style="@($"background:{Colors.BlueGray.Lighten2};")" Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Color="Color.Inherit" Edge="Edge.End" />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
</MudLayout>
@code {
    bool _connectedToBus = false;
    bool _isInProgress = false;
    string _servicebusName = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        globalEventHandler.OnWaiting += OnWaiting;
    }

    private void OnWaiting(NexusExplorerEventArgs eventArgsArgs)
    {
        _isInProgress = eventArgsArgs.Value == "inprogress";
        StateHasChanged();
    }

    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true };

        var dialogResponse = await DialogService.ShowAsync<NexusExplorer.App.Components.Dialogs.Connection>("Connect to service bus", options);
        var result = await dialogResponse.Result;

        if (!result?.Canceled ?? false)
        {
            _connectedToBus = true;
            _servicebusName = result?.Data?.ToString() ?? "unknown";

            globalEventHandler.OnServicebusConnected?.Invoke(new ViewModels.NexusExplorerEventArgs { Value=_servicebusName, Sender = "Layout" });
        }
    }
}